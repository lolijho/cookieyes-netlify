{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/db.ts"],"sourcesContent":["import { createClient } from '@libsql/client';\n\nexport const db = createClient({\n  url: process.env.STORAGE_TURSO_DATABASE_URL || process.env.TURSO_DATABASE_URL || 'file:./local.db',\n  authToken: process.env.STORAGE_TURSO_AUTH_TOKEN || process.env.TURSO_AUTH_TOKEN,\n});\n\n// Schema del database aggiornato per sistema multi-utente\nexport const initDatabase = async () => {\n  // Tabella piani di sottoscrizione\n  await db.execute(`\n    CREATE TABLE IF NOT EXISTS plans (\n      id TEXT PRIMARY KEY,\n      name TEXT NOT NULL,\n      display_name TEXT NOT NULL,\n      max_projects INTEGER NOT NULL,\n      price INTEGER NOT NULL,\n      currency TEXT DEFAULT 'EUR',\n      features TEXT,\n      is_active INTEGER DEFAULT 1,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n\n  // Tabella utenti aggiornata con sistema ruoli e piani\n  await db.execute(`\n    CREATE TABLE IF NOT EXISTS users (\n      id TEXT PRIMARY KEY,\n      email TEXT UNIQUE NOT NULL,\n      password_hash TEXT NOT NULL,\n      first_name TEXT,\n      last_name TEXT,\n      company TEXT,\n      role TEXT DEFAULT 'client',\n      plan_id TEXT REFERENCES plans(id),\n      is_active INTEGER DEFAULT 1,\n      email_verified INTEGER DEFAULT 0,\n      last_login DATETIME,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      projects_used INTEGER DEFAULT 0,\n      api_calls_this_month INTEGER DEFAULT 0,\n      last_api_reset DATETIME DEFAULT CURRENT_TIMESTAMP,\n      created_by TEXT,\n      notes TEXT\n    )\n  `);\n\n  // Tabella sessioni per autenticazione\n  await db.execute(`\n    CREATE TABLE IF NOT EXISTS sessions (\n      id TEXT PRIMARY KEY,\n      user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n      expires_at DATETIME NOT NULL,\n      ip_address TEXT,\n      user_agent TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n\n  // Tabella progetti aggiornata per multi-utente\n  await db.execute(`\n    CREATE TABLE IF NOT EXISTS projects (\n      id TEXT PRIMARY KEY,\n      user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n      name TEXT NOT NULL,\n      domain TEXT NOT NULL,\n      language TEXT DEFAULT 'it',\n      banner_config TEXT NOT NULL,\n      total_views INTEGER DEFAULT 0,\n      total_consents INTEGER DEFAULT 0,\n      is_active INTEGER DEFAULT 1,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n\n  // Tabella consensi aggiornata\n  await db.execute(`\n    CREATE TABLE IF NOT EXISTS consents (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      project_id TEXT NOT NULL REFERENCES projects(id) ON DELETE CASCADE,\n      session_id TEXT NOT NULL,\n      ip_address TEXT,\n      user_agent TEXT,\n      domain TEXT,\n      necessary INTEGER DEFAULT 1,\n      analytics INTEGER DEFAULT 0,\n      marketing INTEGER DEFAULT 0,\n      preferences INTEGER DEFAULT 0,\n      timestamp TEXT,\n      browser_language TEXT,\n      screen_resolution TEXT,\n      timezone TEXT,\n      referrer TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      UNIQUE(project_id, session_id)\n    )\n  `);\n\n  // Tabella audit log per amministrazione\n  await db.execute(`\n    CREATE TABLE IF NOT EXISTS audit_logs (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id TEXT REFERENCES users(id),\n      action TEXT NOT NULL,\n      resource TEXT,\n      resource_id TEXT,\n      details TEXT,\n      ip_address TEXT,\n      user_agent TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n\n  // Indici per performance\n  await db.execute(`CREATE INDEX IF NOT EXISTS idx_users_email ON users (email)`);\n  await db.execute(`CREATE INDEX IF NOT EXISTS idx_users_role ON users (role)`);\n  await db.execute(`CREATE INDEX IF NOT EXISTS idx_users_plan_id ON users (plan_id)`);\n  await db.execute(`CREATE INDEX IF NOT EXISTS idx_sessions_user_id ON sessions (user_id)`);\n  await db.execute(`CREATE INDEX IF NOT EXISTS idx_sessions_expires ON sessions (expires_at)`);\n  await db.execute(`CREATE INDEX IF NOT EXISTS idx_projects_user_id ON projects (user_id)`);\n  await db.execute(`CREATE INDEX IF NOT EXISTS idx_consents_project_id ON consents (project_id)`);\n  await db.execute(`CREATE INDEX IF NOT EXISTS idx_consents_created_at ON consents (created_at)`);\n  await db.execute(`CREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON audit_logs (user_id)`);\n  await db.execute(`CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON audit_logs (action)`);\n  \n  console.log('‚úÖ Database multi-utente inizializzato');\n  \n  // Inizializza dati predefiniti\n  await initDefaultData();\n};\n\n// Inizializza piani e amministratore predefiniti\nexport const initDefaultData = async () => {\n  try {\n    // Controlla se esistono gi√† piani\n    const existingPlans = await db.execute('SELECT COUNT(*) as count FROM plans');\n    const planCount = existingPlans.rows[0]?.count as number;\n    \n    if (planCount === 0) {\n      console.log('üìã Creazione piani predefiniti...');\n      \n      // Piano Starter (1 progetto)\n      await db.execute({\n        sql: `INSERT INTO plans (id, name, display_name, max_projects, price, features) VALUES (?, ?, ?, ?, ?, ?)`,\n        args: [\n          'starter',\n          'starter',\n          'Piano Starter',\n          1,\n          0, // Gratuito\n          JSON.stringify([\n            'Fino a 1 progetto',\n            'Banner cookie personalizzabile',\n            'Analytics di base',\n            'Export CSV',\n            'Supporto email'\n          ])\n        ]\n      });\n      \n      // Piano Professional (2 progetti)\n      await db.execute({\n        sql: `INSERT INTO plans (id, name, display_name, max_projects, price, features) VALUES (?, ?, ?, ?, ?, ?)`,\n        args: [\n          'professional',\n          'professional',\n          'Piano Professional',\n          2,\n          2900, // ‚Ç¨29.00\n          JSON.stringify([\n            'Fino a 2 progetti',\n            'Banner cookie personalizzabile',\n            'Analytics avanzate',\n            'Export CSV',\n            'Cookie scanner automatico',\n            'Supporto prioritario'\n          ])\n        ]\n      });\n      \n      // Piano Business (5 progetti)\n      await db.execute({\n        sql: `INSERT INTO plans (id, name, display_name, max_projects, price, features) VALUES (?, ?, ?, ?, ?, ?)`,\n        args: [\n          'business',\n          'business',\n          'Piano Business',\n          5,\n          4900, // ‚Ç¨49.00\n          JSON.stringify([\n            'Fino a 5 progetti',\n            'Banner cookie personalizzabile',\n            'Analytics complete',\n            'Export CSV',\n            'Cookie scanner automatico',\n            'API avanzate',\n            'Audit log completo',\n            'Supporto dedicato'\n          ])\n        ]\n      });\n      \n      console.log('‚úÖ Piani predefiniti creati');\n    }\n    \n    // Controlla se esiste l'amministratore\n    const existingAdmin = await db.execute({\n      sql: 'SELECT COUNT(*) as count FROM users WHERE email = ?',\n      args: ['lorecucchini@gmail.com']\n    });\n    const adminCount = existingAdmin.rows[0]?.count as number;\n    \n    if (adminCount === 0) {\n      console.log('üëë Creazione amministratore predefinito...');\n      \n      // Hash password predefinita \"admin123\" (DA CAMBIARE)\n      const bcrypt = require('bcryptjs');\n      const defaultPasswordHash = await bcrypt.hash('admin123', 10);\n      \n      await db.execute({\n        sql: `INSERT INTO users (\n          id, email, password_hash, first_name, last_name, \n          role, plan_id, is_active, email_verified, created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n        args: [\n          'admin_' + Date.now(),\n          'lorecucchini@gmail.com',\n          defaultPasswordHash,\n          'Lorenzo',\n          'Cucchini',\n          'admin',\n          'business', // Piano business per l'admin\n          1,\n          1,\n          new Date().toISOString()\n        ]\n      });\n      \n      console.log('‚úÖ Amministratore predefinito creato');\n      console.log('üìß Email: lorecucchini@gmail.com');\n      console.log('üîë Password temporanea: admin123 (CAMBIARE IMMEDIATAMENTE!)');\n      \n      // Log dell'azione\n      await db.execute({\n        sql: `INSERT INTO audit_logs (action, resource, details, created_at) VALUES (?, ?, ?, ?)`,\n        args: [\n          'create_admin',\n          'user',\n          JSON.stringify({ email: 'lorecucchini@gmail.com', reason: 'Initial setup' }),\n          new Date().toISOString()\n        ]\n      });\n    }\n  } catch (error) {\n    console.error('‚ùå Errore inizializzazione dati predefiniti:', error);\n  }\n};\n\n// === TIPI TYPESCRIPT AGGIORNATI ===\n\nexport interface Plan {\n  id: string;\n  name: string;\n  display_name: string;\n  max_projects: number;\n  price: number;\n  currency: string;\n  features?: string;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  password_hash: string;\n  first_name?: string;\n  last_name?: string;\n  company?: string;\n  role: 'admin' | 'client';\n  plan_id?: string;\n  is_active: boolean;\n  email_verified: boolean;\n  last_login?: string;\n  created_at: string;\n  updated_at: string;\n  projects_used: number;\n  api_calls_this_month: number;\n  last_api_reset: string;\n  created_by?: string;\n  notes?: string;\n}\n\nexport interface Session {\n  id: string;\n  user_id: string;\n  expires_at: string;\n  ip_address?: string;\n  user_agent?: string;\n  created_at: string;\n}\n\nexport interface Project {\n  id: string;\n  user_id: string;\n  name: string;\n  domain: string;\n  language: string;\n  banner_config: string;\n  total_views: number;\n  total_consents: number;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Consent {\n  id: number;\n  project_id: string;\n  session_id: string;\n  ip_address?: string;\n  user_agent?: string;\n  domain?: string;\n  necessary: number;\n  analytics: number;\n  marketing: number;\n  preferences: number;\n  timestamp?: string;\n  browser_language?: string;\n  screen_resolution?: string;\n  timezone?: string;\n  referrer?: string;\n  created_at: string;\n}\n\nexport interface AuditLog {\n  id: number;\n  user_id?: string;\n  action: string;\n  resource?: string;\n  resource_id?: string;\n  details?: string;\n  ip_address?: string;\n  user_agent?: string;\n  created_at: string;\n}\n\n// Tipi per autenticazione\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  success: boolean;\n  user?: Omit<User, 'password_hash'>;\n  session?: Session;\n  error?: string;\n}\n\nexport interface CreateUserRequest {\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n  company?: string;\n  planId: string;\n  notes?: string;\n}\n\nexport interface BannerConfig {\n  layout: 'bottom' | 'top' | 'center' | 'corner';\n  colors: {\n    background: string;\n    text: string;\n    button_accept: string;\n    button_reject: string;\n    button_settings: string;\n  };\n  texts: {\n    title: string;\n    description: string;\n    accept_all: string;\n    reject_all: string;\n    settings: string;\n    save_preferences: string;\n  };\n  categories: {\n    necessary: boolean;\n    analytics: boolean;\n    marketing: boolean;\n    preferences: boolean;\n  };\n}\n\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/auth.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { db, type User, type Session } from '../db';\n\nexport interface AuthenticatedUser extends Omit<User, 'password_hash'> {\n  session: Session;\n}\n\nexport class AuthManager {\n  // Verifica se una sessione √® valida\n  static async validateSession(sessionId: string): Promise<AuthenticatedUser | null> {\n    try {\n      if (!sessionId) {\n        return null;\n      }\n\n      // Query per ottenere sessione e utente\n      const result = await db.execute({\n        sql: `\n          SELECT \n            s.*,\n            u.id as user_id,\n            u.email,\n            u.first_name,\n            u.last_name,\n            u.company,\n            u.role,\n            u.plan_id,\n            u.is_active,\n            u.email_verified,\n            u.last_login,\n            u.created_at as user_created_at,\n            u.updated_at as user_updated_at,\n            u.projects_used,\n            u.api_calls_this_month,\n            u.last_api_reset,\n            u.created_by,\n            u.notes\n          FROM sessions s\n          JOIN users u ON s.user_id = u.id\n          WHERE s.id = ? AND s.expires_at > ? AND u.is_active = 1\n        `,\n        args: [sessionId, new Date().toISOString()]\n      });\n\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      const row = result.rows[0] as any;\n\n      const user: AuthenticatedUser = {\n        id: row.user_id,\n        email: row.email,\n        first_name: row.first_name,\n        last_name: row.last_name,\n        company: row.company,\n        role: row.role as 'admin' | 'client',\n        plan_id: row.plan_id,\n        is_active: Boolean(row.is_active),\n        email_verified: Boolean(row.email_verified),\n        last_login: row.last_login,\n        created_at: row.user_created_at,\n        updated_at: row.user_updated_at,\n        projects_used: row.projects_used || 0,\n        api_calls_this_month: row.api_calls_this_month || 0,\n        last_api_reset: row.last_api_reset,\n        created_by: row.created_by,\n        notes: row.notes,\n        session: {\n          id: row.id,\n          user_id: row.user_id,\n          expires_at: row.expires_at,\n          ip_address: row.ip_address,\n          user_agent: row.user_agent,\n          created_at: row.created_at\n        }\n      };\n\n      return user;\n    } catch (error) {\n      console.error('‚ùå Errore validazione sessione:', error);\n      return null;\n    }\n  }\n\n  // Estrae utente autenticato dalla richiesta\n  static async getAuthenticatedUser(request: NextRequest): Promise<AuthenticatedUser | null> {\n    const sessionId = request.cookies.get('session_id')?.value;\n    if (!sessionId) {\n      return null;\n    }\n\n    return await this.validateSession(sessionId);\n  }\n\n  // Verifica se l'utente √® amministratore\n  static isAdmin(user: AuthenticatedUser | null): boolean {\n    return user?.role === 'admin';\n  }\n\n  // Verifica se l'utente pu√≤ accedere a un progetto specifico\n  static async canAccessProject(user: AuthenticatedUser, projectId: string): Promise<boolean> {\n    if (this.isAdmin(user)) {\n      return true; // Gli admin possono accedere a tutti i progetti\n    }\n\n    try {\n      const result = await db.execute({\n        sql: 'SELECT id FROM projects WHERE id = ? AND user_id = ? AND is_active = 1',\n        args: [projectId, user.id]\n      });\n\n      return result.rows.length > 0;\n    } catch (error) {\n      console.error('‚ùå Errore verifica accesso progetto:', error);\n      return false;\n    }\n  }\n\n  // Verifica se l'utente ha raggiunto il limite di progetti\n  static async hasReachedProjectLimit(user: AuthenticatedUser): Promise<boolean> {\n    if (this.isAdmin(user)) {\n      return false; // Gli admin non hanno limiti\n    }\n\n    try {\n      // Ottieni il piano dell'utente\n      const planResult = await db.execute({\n        sql: 'SELECT max_projects FROM plans WHERE id = ?',\n        args: [user.plan_id]\n      });\n\n      if (planResult.rows.length === 0) {\n        return true; // Se non ha un piano, non pu√≤ creare progetti\n      }\n\n      const maxProjects = planResult.rows[0].max_projects as number;\n\n      // Conta i progetti attivi dell'utente\n      const projectsResult = await db.execute({\n        sql: 'SELECT COUNT(*) as count FROM projects WHERE user_id = ? AND is_active = 1',\n        args: [user.id]\n      });\n\n      const currentProjects = projectsResult.rows[0]?.count as number || 0;\n\n      return currentProjects >= maxProjects;\n    } catch (error) {\n      console.error('‚ùå Errore verifica limite progetti:', error);\n      return true; // In caso di errore, blocca la creazione\n    }\n  }\n\n  // Pulisce sessioni scadute\n  static async cleanExpiredSessions(): Promise<void> {\n    try {\n      await db.execute({\n        sql: 'DELETE FROM sessions WHERE expires_at < ?',\n        args: [new Date().toISOString()]\n      });\n      console.log('üßπ Sessioni scadute pulite');\n    } catch (error) {\n      console.error('‚ùå Errore pulizia sessioni:', error);\n    }\n  }\n\n  // Ottieni statistiche utente per admin\n  static async getUserStats(userId: string): Promise<any> {\n    try {\n      const [userResult, projectsResult, consentsResult] = await Promise.all([\n        db.execute({\n          sql: `\n            SELECT u.*, p.display_name as plan_name, p.max_projects \n            FROM users u \n            LEFT JOIN plans p ON u.plan_id = p.id \n            WHERE u.id = ?\n          `,\n          args: [userId]\n        }),\n        db.execute({\n          sql: 'SELECT COUNT(*) as count FROM projects WHERE user_id = ? AND is_active = 1',\n          args: [userId]\n        }),\n        db.execute({\n          sql: `\n            SELECT COUNT(*) as count \n            FROM consents c \n            JOIN projects p ON c.project_id = p.id \n            WHERE p.user_id = ?\n          `,\n          args: [userId]\n        })\n      ]);\n\n      if (userResult.rows.length === 0) {\n        return null;\n      }\n\n      const user = userResult.rows[0] as any;\n      const projectCount = projectsResult.rows[0]?.count as number || 0;\n      const consentCount = consentsResult.rows[0]?.count as number || 0;\n\n      return {\n        ...user,\n        project_count: projectCount,\n        consent_count: consentCount\n      };\n    } catch (error) {\n      console.error('‚ùå Errore ottenimento statistiche utente:', error);\n      return null;\n    }\n  }\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 489, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { AuthManager } from './lib/auth'\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl\n  \n  // Route pubbliche che non richiedono autenticazione\n  const publicRoutes = ['/login', '/register', '/api/auth/', '/api/script/', '/api/consents']\n  const isPublicRoute = publicRoutes.some(route => pathname.startsWith(route))\n  \n  // Bypass per le API script e consensi (devono essere pubbliche)\n  if (pathname.startsWith('/api/script/') || pathname.startsWith('/api/consents')) {\n    const response = NextResponse.next()\n    response.headers.set('Access-Control-Allow-Origin', '*')\n    response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')\n    response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization')\n    return response\n  }\n  \n  // Bypass per le API di autenticazione\n  if (pathname.startsWith('/api/auth/')) {\n    const response = NextResponse.next()\n    response.headers.set('Access-Control-Allow-Origin', '*')\n    response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')\n    response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization')\n    return response\n  }\n  \n  // Per le altre API, verifica autenticazione\n  if (pathname.startsWith('/api/')) {\n    const user = await AuthManager.getAuthenticatedUser(request)\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'Autenticazione richiesta' },\n        { status: 401 }\n      )\n    }\n    \n    // Verifica accesso admin per route amministrative\n    if (pathname.startsWith('/api/admin/') && !AuthManager.isAdmin(user)) {\n      return NextResponse.json(\n        { error: 'Accesso non autorizzato' },\n        { status: 403 }\n      )\n    }\n    \n    const response = NextResponse.next()\n    \n    // Aggiungi informazioni utente agli headers per le API\n    response.headers.set('X-User-ID', user.id)\n    response.headers.set('X-User-Role', user.role)\n    response.headers.set('X-User-Plan', user.plan_id || 'none')\n    \n    return response\n  }\n  \n  // Verifica autenticazione per le route protette\n  if (!isPublicRoute) {\n    const user = await AuthManager.getAuthenticatedUser(request)\n    \n    if (!user) {\n      // Reindirizza alla pagina di login\n      const loginUrl = new URL('/login', request.url)\n      loginUrl.searchParams.set('redirect', pathname)\n      return NextResponse.redirect(loginUrl)\n    }\n    \n    // Verifica accesso admin per route amministrative\n    if (pathname.startsWith('/admin') && !AuthManager.isAdmin(user)) {\n      return NextResponse.json(\n        { error: 'Accesso amministratore richiesto' },\n        { status: 403 }\n      )\n    }\n    \n    // Aggiungi informazioni utente per le pagine\n    const response = NextResponse.next()\n    response.headers.set('X-User-ID', user.id)\n    response.headers.set('X-User-Role', user.role)\n    \n    return response\n  }\n  \n  // Per le route pubbliche, procedi normalmente\n  return NextResponse.next()\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!_next/static|_next/image|favicon.ico).*)',\n  ],\n} "],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,oDAAoD;IACpD,MAAM,eAAe;QAAC;QAAU;QAAa;QAAc;QAAgB;KAAgB;IAC3F,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC;IAErE,gEAAgE;IAChE,IAAI,SAAS,UAAU,CAAC,mBAAmB,SAAS,UAAU,CAAC,kBAAkB;QAC/E,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI;QAClC,SAAS,OAAO,CAAC,GAAG,CAAC,+BAA+B;QACpD,SAAS,OAAO,CAAC,GAAG,CAAC,gCAAgC;QACrD,SAAS,OAAO,CAAC,GAAG,CAAC,gCAAgC;QACrD,OAAO;IACT;IAEA,sCAAsC;IACtC,IAAI,SAAS,UAAU,CAAC,eAAe;QACrC,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI;QAClC,SAAS,OAAO,CAAC,GAAG,CAAC,+BAA+B;QACpD,SAAS,OAAO,CAAC,GAAG,CAAC,gCAAgC;QACrD,SAAS,OAAO,CAAC,GAAG,CAAC,gCAAgC;QACrD,OAAO;IACT;IAEA,4CAA4C;IAC5C,IAAI,SAAS,UAAU,CAAC,UAAU;QAChC,MAAM,OAAO,MAAM,mHAAA,CAAA,cAAW,CAAC,oBAAoB,CAAC;QAEpD,IAAI,CAAC,MAAM;YACT,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,kDAAkD;QAClD,IAAI,SAAS,UAAU,CAAC,kBAAkB,CAAC,mHAAA,CAAA,cAAW,CAAC,OAAO,CAAC,OAAO;YACpE,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI;QAElC,uDAAuD;QACvD,SAAS,OAAO,CAAC,GAAG,CAAC,aAAa,KAAK,EAAE;QACzC,SAAS,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK,IAAI;QAC7C,SAAS,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK,OAAO,IAAI;QAEpD,OAAO;IACT;IAEA,gDAAgD;IAChD,IAAI,CAAC,eAAe;QAClB,MAAM,OAAO,MAAM,mHAAA,CAAA,cAAW,CAAC,oBAAoB,CAAC;QAEpD,IAAI,CAAC,MAAM;YACT,mCAAmC;YACnC,MAAM,WAAW,IAAI,IAAI,UAAU,QAAQ,GAAG;YAC9C,SAAS,YAAY,CAAC,GAAG,CAAC,YAAY;YACtC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;QAC/B;QAEA,kDAAkD;QAClD,IAAI,SAAS,UAAU,CAAC,aAAa,CAAC,mHAAA,CAAA,cAAW,CAAC,OAAO,CAAC,OAAO;YAC/D,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,6CAA6C;QAC7C,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI;QAClC,SAAS,OAAO,CAAC,GAAG,CAAC,aAAa,KAAK,EAAE;QACzC,SAAS,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK,IAAI;QAE7C,OAAO;IACT;IAEA,8CAA8C;IAC9C,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;KAKC,GACD;KACD;AACH"}}]
}